@page
@model SistemaChamados.Pages.Tickets.CreateModel
@using SistemaChamados.Models
@using static SistemaChamados.Models.Enums
@{
    ViewData["Title"] = "Criar Novo Chamado";
}

<!-- Backdrop + Dialog -->
<div class="create-backdrop">
    <div class="create-dialog" role="dialog" aria-modal="true" aria-labelledby="dlgTitle">
        <a class="create-close" asp-page="./Index" aria-label="Fechar">×</a>

        <h2 id="dlgTitle" class="create-title">Criar Novo Chamado</h2>

        <form id="ticketForm" method="post" enctype="multipart/form-data" novalidate>
            <!-- Título -->
            <div class="form-group">
                <label asp-for="Input.Titulo">Título do Chamado</label>
                <input asp-for="Input.Titulo" class="form-control"
                       placeholder="Descreva brevemente o problema..." />
                <span asp-validation-for="Input.Titulo" class="text-danger"></span>
            </div>

            <!-- Linha: Categoria | Prioridade -->
            <div class="form-row two">
                <div class="form-group">
                    <label asp-for="Input.CategoriaId">Categoria</label>
                    <select asp-for="Input.CategoriaId" class="form-control form-select"
                            asp-items="@(new SelectList(Model.Categorias, nameof(Categoria.Id), nameof(Categoria.Nome)))">
                        <option value="">Selecione uma categoria</option>
                    </select>
                    <span asp-validation-for="Input.CategoriaId" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Input.Prioridade">Prioridade</label>
                    <select asp-for="Input.Prioridade" class="form-control form-select" id="prioridadeSelect">
                        <option value="@PriorityLevel.Baixa">Baixa</option>
                        <option value="@PriorityLevel.Média" selected>Média</option>
                        <option value="@PriorityLevel.Alta">Alta</option>
                        <option value="@PriorityLevel.Crítica">Crítica</option>
                    </select>
                </div>
            </div>

            <!-- Descrição -->
            <div class="form-group">
                <label asp-for="Input.Descricao">Descrição</label>
                <textarea asp-for="Input.Descricao" rows="5" class="form-control"
                          placeholder="Descreva detalhadamente o problema, incluindo passos para reproduzir, mensagens de erro, etc..."></textarea>
                <span asp-validation-for="Input.Descricao" class="text-danger"></span>
            </div>

            <!-- Anexos -->
            <div class="form-group">
                <label>Anexos</label>
                <div class="mb-2">
                    <input type="file"
                           class="form-control"
                           id="fileInput"
                           name="Input.Anexos"
                           multiple
                           accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png,.gif,.zip,.rar,.xlsx,.xls,.pptx,.ppt"
                           style="display: none;" />
                    <small class="text-muted ms-2">
                        PDF, DOC, Excel, PowerPoint, TXT, Imagens, ZIP, RAR (máx. 10MB cada, máx. 10 arquivos)
                    </small>
                </div>
                <div id="filePreview" class="file-preview"></div>
            </div>


            <div class="create-actions">
                <a asp-page="./Index" class="btn btn-secondary">Cancelar</a>
                <button type="submit" class="btn btn-primary">Criar Chamado</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // ===== BOTÃO DE ANEXAR ABRE O FILE INPUT =====
            const btnAnexar = document.getElementById('btnAnexar');
            const fileInput = document.getElementById('fileInput');
            const filePreview = document.getElementById('filePreview');

            if (btnAnexar && fileInput) {
                btnAnexar.addEventListener('click', function() {
                    fileInput.click();
                });
            }

            // ===== PREVIEW DE ANEXOS COM VALIDAÇÃO =====
            if (fileInput && filePreview) {
                fileInput.addEventListener('change', function(e) {
                    filePreview.innerHTML = '';

                    const files = e.target.files;
                    if (files.length === 0) {
                        // Resetar texto do botão se nenhum arquivo
                        if (btnAnexar) {
                            btnAnexar.innerHTML = '<span class="clip">📎</span> Anexar Arquivos';
                        }
                        return;
                    }

                    const maxSize = 10 * 1024 * 1024; // 10MB
                    const maxFiles = 10;
                    const allowedTypes = ['.pdf', '.doc', '.docx', '.txt', '.jpg', '.jpeg', '.png', '.gif', '.zip', '.rar', '.xlsx', '.xls', '.pptx', '.ppt'];

                    // Verificar número de arquivos
                    if (files.length > maxFiles) {
                        const warningDiv = document.createElement('div');
                        warningDiv.className = 'alert alert-warning d-flex align-items-center mb-2';
                        warningDiv.innerHTML = `
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            <span>Você selecionou ${files.length} arquivos. Máximo permitido: ${maxFiles} arquivos.</span>
                        `;
                        filePreview.appendChild(warningDiv);
                    }

                    // Mostrar cada arquivo
                    Array.from(files).forEach((file, index) => {
                        const fileSize = (file.size / 1024 / 1024).toFixed(2);
                        const fileExt = '.' + file.name.split('.').pop().toLowerCase();

                        let statusClass = 'text-success';
                        let statusIcon = 'bi-check-circle-fill';
                        let statusText = `${fileSize} MB`;

                        if (file.size > maxSize) {
                            statusClass = 'text-danger';
                            statusIcon = 'bi-x-circle-fill';
                            statusText = `${fileSize} MB - Muito grande (máx. 10MB)`;
                        } else if (!allowedTypes.includes(fileExt)) {
                            statusClass = 'text-danger';
                            statusIcon = 'bi-x-circle-fill';
                            statusText = `Tipo não permitido`;
                        }

                        const fileItem = document.createElement('div');
                        fileItem.className = 'd-flex align-items-center justify-content-between p-3 border rounded mb-2 bg-light';
                        fileItem.innerHTML = `
                            <div class="d-flex align-items-center">
                                <i class="bi bi-paperclip me-2 fs-5"></i>
                                <div>
                                    <div class="fw-medium">${file.name}</div>
                                    <small class="text-muted">Arquivo ${index + 1} de ${files.length}</small>
                                </div>
                            </div>
                            <div class="${statusClass}">
                                <i class="bi ${statusIcon} me-1"></i>
                                <small>${statusText}</small>
                            </div>
                        `;
                        filePreview.appendChild(fileItem);
                    });

                    // Atualizar texto do botão
                    if (btnAnexar && files.length > 0) {
                        btnAnexar.innerHTML = `<span class="clip">📎</span> ${files.length} arquivo(s) selecionado(s)`;
                    }
                });
            }
        });
    </script>
}

